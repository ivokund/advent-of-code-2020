const input = `4 + (5 + (5 * 5 + 3 + 2) + (6 + 4 * 9 * 2 * 8) * 6 + (7 * 5 * 2) * (2 * 8 * 2)) + (8 * 7 + 7) * 6 * 9 * (5 + 9)
(5 + 4 + 8 * 4 * 9 * (3 + 8 * 7 + 5 + 5)) * 6 * 8 * 9 * 4 + 2
(6 * (2 * 7 * 3 * 7 * 2) + 5 * 4 + (2 * 9 + 8 + 3) + 6) * (8 + 3 * 9) * ((9 * 2) + 2)
5 * (2 * 8) * 6 + 4
5 * (5 + 2 * 7) * 5
2 + 4 * (4 * 3 * 7 * 2) * 3
4 + (3 * (9 + 7 * 5 * 5 + 5) + 2) * (2 * 9)
(5 + 5) + 2 + 4 + 5 * (8 * 9)
(3 + 4) * 8
4 * 6 + 5 + (5 + 9 * 4 + 6 + 7 * 4) + 4 * 3
(8 + 6 * 4 * 6 * 9) + 8 + (7 + (7 * 2 + 3 + 9 + 4 + 5)) * 7
9 * (6 * (8 + 3 + 3 * 5 * 7) * 2 * 7 * 9 + 6) * 6 * 7
(7 * 8) + ((6 + 8 + 8 * 7 * 7 + 9) * 6 + (5 + 3 + 7 + 4 * 9) + 9 + 5 + 5) * (6 + 6 * 4 * 2 + 4) * 5
(7 + 3 + (4 * 2 + 4 + 5 * 5) + 5) + 4 + 5
2 + 5 + 4 + ((3 * 7 + 6 + 2 * 8) * 9) + (3 + 4) * 3
2 + 5 + 3 * ((7 * 8 + 6) * 9) + 2
(7 + 2 * 9) + 2
((3 + 2 + 9) + 2 + (3 * 2 * 6 * 9 + 4) * (2 + 2 + 6 + 5 * 2) + 7 * 3) * 4
5 * (2 + 2) * 2
(2 * (3 * 4 + 4)) * (7 * 8)
4 + 7 * 9 * (7 + 8) + (6 + 7 + 5 * 4)
(3 + 2 * 2 + 3 + 7) * ((6 * 6) * 4 * 6 + (7 * 7 * 4 * 4 * 3 * 5) * (8 * 3 * 3 + 7 + 4 * 5)) * 9 + 8 * 6
7 * 2 * ((7 * 2 + 7 + 9) + 4 + 2 + 2 + (3 * 5 + 9 * 4 + 3 * 2)) * 5 + 7 * 7
3 + 2 * (9 + 8 * (3 + 5 + 7) + (2 + 8) * 7 + (2 + 8)) * ((4 * 8 * 9 + 5) + (8 * 9 + 3 * 9 + 7)) + 9
(5 * (5 + 4 * 8 * 8 + 9) + 8) * (6 + 9 + 9 * 5 + 8) + 7 + 9
6 * 2 * (9 + (7 * 3) + 4 * 4 * 6) * ((2 * 3 * 2 + 7) + 4 + 3)
(6 + 9 * 5 + 8 * 5) * 9 * 4 * 5 * 5 + 8
(9 + (2 + 8 * 7) * (4 * 6 * 6 + 3) + 4) + 4 + 6 * 2 + 3
(3 * 7 + (5 * 4 + 3 * 8) * (5 + 9 + 2 + 2) * 5) + (5 * 9 + (3 + 7 + 2) + 7 * 8 + 4) * 6
4 + 5 + (7 + (9 + 8 * 2 * 5) + 3 * 3 + 6 + (9 * 4)) * 6 + 7 + (2 * 4 * 7 * 5)
3 * (2 * 7) + 6 + 2 * ((4 + 9 + 4 * 7 * 7) * 8 * 9 + 8 + (9 + 3 * 6 * 2))
8 * ((7 * 3 + 5) * 2)
(3 * 8 * 2) + 6 * 7 * 8 * ((8 + 3) + 7 * (4 * 5 + 3 + 5 * 2 + 6) * 3 * 8 * 9)
6 * 7 * (6 + 7 * 5 + 5 * 5 + 4) * (2 + 3 + 4)
((5 + 8 + 6 * 7) + 5 * 7 * (4 * 6 + 5 * 4)) * 9
8 * 4 * 4 + (6 * 5 + 4 + 3 + 5 + 2)
6 * 4 + 8 + 8 * 8 * ((7 + 5 * 4 * 3 + 7) + 2)
5 + (4 * 8 + 6 + 8 * 5 * (4 + 5)) * (3 * 2) + 2
9 + 7 * 7 + (2 * 4) * 2 + (3 + 4 * 5 * (2 * 8 * 4))
6 + (6 + 3 + 4 + 2 * 6) + 3
7 + 9 * 3 * 3 + 5
(3 + 6 + 8 + 8 * 2 + 4) + (6 * 3 * 7 * (7 + 8) + 6 * 7) + 7 * 9 * ((9 * 8 * 7 * 3) * 8 + 7)
(4 * (6 * 6 + 4 + 9 + 9) * (4 + 5 * 8)) * (9 + 7 * 6 * 3 * 8 * (5 * 2 + 2))
9 * 5 + ((4 * 9 * 3) * 6 * 3 * 9 * 5) * (6 * 6 * 8 * (8 + 8 * 7 + 3 + 5) * 6) + (3 * 8 * 8 + 8 * 6 * 4)
6 * 3 * (6 * 4 * 4) * 4 + 9
9 * (6 + 7 * 4 * 7 + 2 * (8 + 5 + 9 + 4 * 2)) * 5 + 9
(8 + 7) * 6 + 8 + 5
((5 + 2 * 3 * 4) * 2 + (5 * 7 + 8)) + 3 * 7 + 8 + (8 + 3 * 7 * (7 + 3 + 6 * 6))
(2 * 8) * (6 + 9) * 6 + 6
7 * 2 + 2 * (4 * 3 * 4) + 8
6 + (9 + 4 * (9 * 9) + 2 + 9) * 2 + 2 + 6
7 + 4 * (9 + (9 * 5 + 7 * 3) + (9 + 4)) + (9 + 2 * (9 + 3) * 7 + 9) * 9
8 + (4 + 6 + (2 + 5 * 5) * (8 * 3 * 8 * 2) + 2 + 6) * 5 * ((4 * 2 + 7 * 8 * 6 + 5) + 3 * 5)
7 * ((4 + 4 * 3 + 9 * 2) * 3) + 6
5 + (4 * 2 + 7 + 8 + 4 + 7) + 8 * 2 * (7 * 8 + 5 * (9 * 3 * 8) + 7)
7 + 8 + 5 * (2 + (5 + 4 * 2 * 7) + 2) * (2 * 7 * (6 + 9 * 2 + 5 + 5 * 4))
(2 * 5 + 4 + 2 * 5 + 6) * 4 * ((7 * 4 + 9) + (2 * 2 * 6 * 6 + 2) + 4 + (3 + 7 * 3 + 9 + 6 * 7) + (9 + 5 + 8) * 6) * 7 * 6
((5 + 8) * (9 + 6 + 7 + 8 * 4 * 9) * 2 * (8 + 4 * 3 + 5 * 3 + 2) * 6) + 4 + (9 + 7) * 9 + 8
6 * (2 + 4 * 8 * 7 * 4 * (7 * 4 * 9 * 3 + 9)) * (6 * 7 + 7 * 6 * 8 + 5) * 3 * 8 * (7 + 2 * 2 * 4)
(8 + (5 * 9) * (7 + 4 + 8 * 2 + 9) + 5 + 8 + (4 * 9 * 5)) + (6 + 3 + 5 * 3) + 8 * (6 + 5 * (7 + 6) + (5 * 8) * 2 + 6)
((5 + 4) * 7) + 5
(8 + 8 * 2 * 4 * 7 * 5) * 9 * 4 * 3 * 8 + (9 + 6 * 3 * 9 + 2)
5 * 7 * 7 + 9 * 3 * (8 + 5 + 8 + 9 * 3)
6 * 9 + 6 + 5 * 2 * (7 + 4 * (6 * 8))
(4 * 4 * 2) + (7 + 5 * 3) * 6 + 6
3 + (4 * (8 + 7) + 5) + (8 * (9 * 6 * 9 * 6))
3 + 3 * (2 * (5 + 2 * 4 + 4 * 5 + 4) + (7 + 8 * 5) + 5 * 9)
2 + 7 * 6 * 9 * (8 * 3) * 5
(7 * (7 + 4) + (5 + 9 * 6 + 2) * 4) + 3 * 7 + 5
3 + (9 * 7 * 5 * (4 * 6))
(7 + 3 * 9 * 5 * 9) * 6 * 2 * 6 * 6
(5 * 3 + (4 + 7 * 2 * 5 * 4 + 3)) * 2 + 2 + (3 * 8 * (9 * 3 * 9 + 5 * 3)) * 4
(3 + 8 * (5 * 4)) + 8 * (5 * (8 + 2 + 3))
4 * 7 + 9 + (5 + 5 * 2 * 7 * 9) + 6 + 5
4 + 6 * (8 + 2 + 6 + 7 + 3 + 2) + 4 * 5
(6 + (3 * 9 + 9 + 7)) * (7 + 4 * (5 + 5 * 3) + (6 + 2 * 3) * 2)
7 + 2 + 5 + (3 + 3 + 5 + 8) * 5 * 2
6 + 6 * 6 * (9 * 4 + (5 * 2 * 3) + (7 * 9 + 4 * 2) + (9 + 4 * 4)) * 6 * 6
2 * 3 + 9 + 6 * (3 + (2 + 4))
2 * 2 * ((7 * 2 + 2 * 5 + 2 + 2) + 9 + 7) * 2 * (4 * 4 * (6 + 3) + 8 * 6 + 3) + (7 * 5 + 4 + 3)
(6 + (5 + 4 + 3 + 5) * (2 + 3 * 7 * 7 + 3) * 2 * 9) * 8 * 3 + 6 + 9
6 + ((8 * 5 + 4 + 2 + 7 * 6) + 4 + 9 * 2 + 4 + 6) * 3
4 * (8 + 8 + 9 + (6 * 7) * 7) * 7
6 + 5 * 2 + 3 + 5
(2 * 9 * 8) * (3 + 5 + 4 * 4 * 2 + 8) * 9
(4 + 7 * 5 * 6 + 2 * 3) + (6 + 2) + 8 + 8 * 7 * 8
4 * 2 + (7 * 6 * 7 * (7 * 9 + 6 + 3)) + 2 * ((9 * 5 + 7 * 2 + 6) + 6 + 4 * 7) + ((8 + 7) * 5)
5 + 9 * (6 + (4 + 9 + 5 * 5 + 5) + 7 + 5 + 6 + 5) * 2 * 2
2 * (4 + 7 + 9 * (8 + 8) + 7) * 6 + ((7 * 5) + 8 + 5 * 8 + 4) * 6 * (6 * 3)
(3 * 2) + (2 * 5) + 8 + 8 * 2 * (3 * 9 + 6 + 6 * 5 + 2)
7 * (8 * 3 + 5 * 4 * (7 * 8 * 5 + 4 + 8 + 9) + (8 * 7 * 6 + 7 + 9)) + 5
2 * 2 * 2 + ((7 + 9 + 5 + 9 + 2) * (3 + 9 * 5 * 8 + 4) + 9) * 5
7 + (2 * 6 + 3 + (9 * 3)) * 4
(3 + 2 + 2 + (3 + 8) * 4 + 9) + 6
3 + (8 * (9 + 3 * 9 * 6) * (8 * 8 * 9 + 4 + 9) + 3 + 3 + 9)
2 + 8 + 4 * (3 * (6 * 8 * 8) * 2 * 5 + (6 * 2 + 8))
(4 * 2 * 5 + 4) + ((5 * 9 * 4 * 8 * 8) * 4) + (9 * 6 + 6 * 3 + 3) * 4 * 6 * 2
((9 + 5 + 9 * 9 + 7) * 4 * 9) + 6 + 7
(8 * (4 + 7 + 5) * 3 + 5) * 3 + 5 * (7 * 9 + 5)
2 * 4 * (8 * (9 + 5 * 2)) + 8 + 8
3 * 5 * ((8 + 3 + 9) * (6 * 7) + 5) * 4 * 5 * (5 * 7 * 2 + 9)
2 * 7 * (6 * (2 * 3 * 8 * 2 + 6 * 2) * (4 * 3) + 6 + 5 * 2)
(7 + 3) + 7 * ((2 + 4 * 2 + 5) * 5 + 7) * 3 + 3
3 + ((6 * 4 + 5 * 5 + 7 + 4) + 8 * 2 * (7 + 3)) + 7
((4 * 8 * 6 * 4) + 4 + 2 + 6) * 9 + 5
9 + ((3 * 6 * 2 * 7) * 5 + 2 + (4 * 9) * 2 * (5 + 8 * 2 + 4 + 2 * 4)) + (6 * 8 + 2 * 4 * 7 + (5 * 3 + 3 + 8 * 8 + 3))
3 + 7 + 8 * 3 * (3 * 8 + 6 * (4 * 4))
(9 * (9 * 3 * 9 + 6 + 5) * 8 + 3) * 5
(6 * 6 * 4 * 3 + (3 + 6) * 6) * 5 * (7 + 3 + 4 * 8 * 5)
8 + (4 * 7 + 4 * (7 * 3 + 3)) * 8
6 * (2 * 4 * 5 + 8) * 3 * 4 + 8 + (7 * 5 + 7 * 7 + 6 * (5 * 9 + 6 + 4))
8 * 6 * (8 + 4 * 6 * 5 + 4) * (3 * 5 + 7 + (9 + 3 * 9) * 9) * (2 * 4 * 3) * 2
3 * 6 * (2 * (5 * 3 * 6 + 8) + 3) + 6 * 5 * ((6 + 5) * (2 * 7 * 4 * 8 + 9))
3 * (8 + 9 * (4 + 7 * 3) + 2 * 4 * 2) * ((5 * 3 + 4 * 5 + 5) + (4 * 7 * 9) + 2 * 8) + (5 * (8 * 6) + 2)
(2 * 7 + 7 + 3 * 7 + 9) + 7 * (8 * 4 + 6 + 4 + 9)
((8 + 2 * 7) * 6 * (5 * 5 * 4 + 2 + 8 * 9) * (5 + 3 + 3) * 3) * 6 * 9 + 6
9 + (9 + (5 * 8 * 8) + 3) + 7 * 4
8 + 5 + (4 * 2 * (3 + 2 * 4 + 8 + 7) + (8 * 5 * 4)) + 2
(8 * (5 * 2 * 8 * 6 * 2 * 6) + 2) * 4 + (5 + 9 * 2 + 5) + 6 + 9
9 * (2 * (3 * 9 + 6 + 5) * (8 * 8 * 9 + 9 * 7 + 9) * 5 * 8 * 7) + 8 + 4 * 8
7 + 6 * 5 * 2 + 5 * (3 * 4)
5 * 3 + 6 + (9 * 6 + 7 + 7) * (9 * 5 * 4 * 6 * 7 * 9) * 3
4 + (6 + 3 + 9 + 3 + 7)
9 * (8 + (4 + 8 + 8 + 2) + 5 * 5 + (4 * 4 + 5 * 3)) * (7 * 8 + 9 + 7) * 6
5 + ((4 + 9 * 7) + (7 * 3 * 2) * 6) * 5
2 + 3 * ((2 + 6 * 7) * 2)
6 * (7 + 9 + (5 * 2 + 4 + 7 * 5 + 8) * 4 * 8 * 6) + 3 * (2 * 5 * 5 * 6 * 3 * 8)
(5 + 6 * 5) * (5 + (8 + 7 * 4 * 9 + 9 * 8) * 8 + 2 + 5 + (9 * 2 + 6 + 6 * 9 * 6)) + 7
(8 + (4 * 7) * 9 + 4) + 6 + 9 * 4 * (3 + 2 * 8 + (5 * 5) + 3 + 8)
4 + 6 + 3 + (4 + 9 + 9 + 7 + (4 + 8 + 9) + 6) + 4 + 9
((9 + 8 + 6 + 7 * 5) * 7 + 7 * 7) + 6 + 7 + (2 * (5 + 5 + 6 * 7)) + 2
6 * 8 + ((5 + 3 + 6 * 9 + 7) * 9) * 9 + (2 * 5 + 3 * 2) + 6
(9 + (6 + 4 + 8 * 9) + 2 + (3 + 3 * 6 + 3) * 5) * 9
5 * 3 + 9 + 5
(2 * 5 + 3 + 3) * (8 * 4 * 2) + 4 + 8
5 * (5 * (9 * 9 + 5 * 6 * 4) + 7) + 5
8 * ((7 + 5) + 7 + 6 * (2 * 2 + 6 + 6 + 2 * 9) + 2) + 2 * 9 + (6 + 2 * (6 + 4 + 8))
(7 + (8 * 6 + 6) + 4 * 5 + 7) * 3 * 2 + 8 + 5
(2 * 5) + (8 * 4 + 2 * 6 * 8) + 7 * 5 * 9
(7 + 2 + (6 + 3 * 7)) + 4 * ((5 * 9 * 6 + 3 + 9 * 9) * 5 + 5)
3 * 8 + (7 * 2 + 5 + 5 + 9 + (4 * 4 + 3 + 6 + 6 + 8)) * 6 + 9
((4 + 8 + 2 + 5) + 4) + (6 + 9)
8 + 2 * (5 * (6 + 5 * 5 + 3) * 3 * 8 * (9 + 7) * 4) + 7
3 + 5
8 + (5 + 9 * 8) + 9 + 7 + 3
3 * (7 * (7 * 2 * 6 * 7) * 8 + 6) * 5 * ((9 + 5) + 2) * (2 * 4 * 4 + 7)
(8 * (8 * 9) + 5 * (2 + 3 + 3 + 2) + 8 * (4 * 9 + 7 * 4 + 9 + 3)) + 3 + ((2 + 3 + 6) + 2 * 2 * 3)
(3 + 5 + 5 * 4 + 8 * 6) + 3
4 + (7 * 9 * 3 * 9 + 3) * (4 * 2 + 9 * (7 * 2) + (9 + 6)) + 9 + 7
9 * (2 * (5 * 2) * 4) + 4
(4 * 8 * (9 * 9 + 4 + 5 * 3 + 9) + 9 * 4) * (2 * 5) * 5 * (7 * 3) * 9
8 * 8 * 9 + ((3 + 6) * 6 * 5) + 7
(8 * 6 + 3 * (2 + 3 * 2) * 8 * 9) * 6 + 4 + 9 + 4 * (4 * 6 * 7 + (9 + 8 + 2 + 6))
(3 * 6 * (7 + 2) * 3 * (4 * 7 + 3 + 6 + 2)) + 3 + 3 + (7 * 3 * 8 + 4 * 8)
3 + ((6 * 6 * 9 * 7 * 2 * 3) * 5 * 9) + 9 + (4 + 7)
5 + 2 + 4 + 5
5 + 2 * (4 + 5 * 5 + 4 * 7 + 5)
9 * (8 + 3 * 6 * 9) * (7 * 5 + 7 + 6 + 4) + 3 * ((2 * 2 * 6 + 5 + 5 * 7) + (4 * 3 + 5) + 8) * 5
7 * (8 * 4 + (9 * 9 * 8) * (4 * 9 * 3) + (5 * 4 + 9)) + 4 * 2
6 * (9 * 6 + 8 * 6 + 4 + 3) * 6 + 5 + 4 * 9
4 * (2 * 6) + 2 * 2 + 7
(6 * 3 + 4 * 4 * 6) + 3 * 8 * (6 + 4) * 5 + 8
(6 + 4 * 9) + (2 + 2) + 2
2 + 2 * (8 * 9) * 4 * 7
((7 * 5) + 3 + 7) + 8
(6 * 8 + 2 * 9 * (3 + 2 * 6 * 9) * 2) + 8 + (3 + 9 + 4 + (8 * 5 + 8)) * (6 + 6 * 3 + 7 + 9) * (4 * 6 + 6 + 6 + 3 * 4) + 2
(2 + (3 + 3 + 9) * 2) * 8 + 5 * 3 + (6 + 9 + 6 * 5 + (6 + 4) * 9)
(9 + (4 + 8 * 4 + 7) * 7 * 2 + 6 + 4) + (3 * 6 * (7 * 2 + 8 * 7 * 3 * 3) * 7) + (9 + 2 * 9 + 3) * (7 + 8 + 7 * (5 * 7 + 9 * 8 + 2 * 2)) + 9 * 4
2 + 2 * 3 + 8
2 * (4 + 5 * (9 + 6 * 7))
6 * 9 * (2 * 4 + 2 + 2)
(5 * 2 + 7 * 2 * 7 * (7 + 3 + 6 * 9 * 3)) * 7 + 7 + 3 + 5
6 + 7 + 2 + 9 * 6
3 + (3 * 7 * (6 * 9 * 7 * 9 + 6 + 4) * 2 + 5)
6 + 2 + 6 + 3
9 + 8 * ((6 * 5 * 3) + (4 + 9 * 6 + 3 + 7 + 8) + 3 * 9 * (7 + 3 + 6) * 3) * 4 + 2 + 6
(8 + 2 + 5 * 4 + 3) * 6
(7 * 8 + 3 + 6 * 2 + 3) + 4 + 2 + 5 * 7 * (4 + 3 + (3 + 8 + 6 * 3) + (4 + 3 + 5) * 3 + 9)
3 + (2 * (6 * 9 + 6) * 4 + (7 * 6 + 7 * 2 * 9))
6 * 6 + 5 + 6 + ((8 + 4 + 3 + 5 * 7) * 4 + 8) * (4 * (9 + 8 + 6 * 2 * 4) + (7 + 7) + 7 * 3 + 5)
(9 * 2 * 5 + 7 + 4) * 4 * (5 * (4 * 3 * 6) + 5 * 6 * 2) + (2 * (5 * 8 + 6 + 4))
(4 * 9 + 5) * (8 * 4) * 9 * 6
9 * 6 + 5 + ((7 + 3) * 7 + 5)
8 * (2 * 9) + 2 * 2 * ((4 + 8 * 8 + 5 + 2) * 9 * 8 + (9 * 9 + 8 * 4 + 9) * 3) * (8 * 7)
7 * 4 + 5 + 3 + 6
9 * (9 + 2 + (4 * 8 * 3 * 6) + 4 * 3 * 4)
(7 * 8 * 5 * 2) * 7 + 4 * (4 + 4 * 9 * 9) * 2 * 3
(8 * 2 + 9 + 4 * 2) + 4 + 8
(8 + 8 * 7 * 3) * (4 * 5 + 5 + 3 * 8) * 8 * 8 + 6 + 5
8 * (6 * 2) * 7 * 5 + 6 + 5
(2 * 8 + 2 + 5 + 2) * 9 * (5 + 5)
4 * (8 + 5 + 9 * 9) + 9 * (8 + 9 * 3 * 7 + 8) + (9 + 2 * 9 * 8 + (9 + 2 + 9 + 2))
(5 * 8 * 8 + (3 + 7 + 6 * 2) + 3 + (8 + 5 + 6 * 4 + 9)) * 5 + 5 + 6 + (4 * 8 + 8 * 4 + (3 * 6 * 7) + (2 * 5 + 5 * 5))
3 + (7 + 5) * (4 + (2 * 9 * 7 + 4) * 3 * 5 * (5 + 7 + 9 + 7)) + 9
3 + 4 * 4 + 3 * 8 + (2 + 2 * 8 * 7)
7 + (2 + 7)
7 + (5 + 6 + 7 + 8 * 9 + 7) + 5 * ((8 * 3) * 4 * 6 + 9 * 2) + 7 + 5
(4 + (5 * 3 + 9 * 6)) + 9 + 3
9 + 4
(3 + 9 * (9 + 8 * 4 + 3 + 4 * 6) + 5) + 8
6 + 5 * ((4 + 5 * 2) + 4 * (5 * 8 + 4) + 8 * 4) * 7 + 6
(8 * 6 + 6 * 6 + (4 + 2 + 3 * 5 * 3 + 4) * 7) * 8 + 2 * 3
2 * (3 * 5 + (6 + 7 + 2 * 8 + 7) * (4 * 8 * 9 * 2)) + (9 + (7 + 2 + 6)) + 4 + 5 + 9
3 * 5 + (6 + 9 + 2)
3 + 4 * 6
4 + 3 * 8 * 3 + 2 + 6
9 + (6 * 2 * 5 + 5) + 7
((8 + 2 * 5 + 2 * 9) + 8) + ((9 + 6 + 6 * 5 + 9 * 6) + 8 + 9 * 9) * (8 * 3 * (7 * 8 * 3 + 7) * 7) + (7 + 2 + 2 * 3 + 5 + 8)
8 * (9 + 7 + 9 * 4 * 7 + 8) * (8 * 3 + 9 + (2 * 5 * 6) + (3 + 2 * 2 * 8 * 4) * 8)
9 * 3 * (3 + 6 * 2 * 8 * 4) + 3 + 4 + 3
6 + ((3 + 2) + 6 * 2 + 7 + 3) * 8 + 4 + ((6 * 3 * 6 + 2) + 6 + 2 + 3 + 7)
((4 + 8) + 7 * 5 * 7 * 4) + 7
(7 + (4 + 6 + 9) * 5 * (7 * 2 + 8)) + (9 * 8)
3 + 9 * 6 + (7 + (9 + 2) + 2 + 8) + 9 * 6
2 + 9 * (6 * 6 * (3 * 8 + 7 * 4 * 4) + 6) * 4
3 + 9 + 3 * 8 * ((9 * 2 + 3 * 5) * 6 * 6 + 2) + 5
7 + 5 + (8 * (4 + 6 + 8 * 6)) + 7
8 * 7 * 6 * 3 * (5 + (4 * 9 * 5) + 4)
((5 + 3) + 4 + 4 * 8) + 4 * 2 + 7
(3 * (9 * 4 * 5 + 5 * 4 * 3) + 2) * 7 * (7 + 3 * 9) * ((2 + 9) + (6 * 5 + 4 + 9) + 4 + 5)
(8 + 8) * 2 + 4
(5 * 5) * 7 * (4 + 8 * 3 + 3)
6 + (6 + 9 + 9) * (4 * 7 + 5)
((2 * 3 * 3 * 3 * 5 * 9) + 8 * (2 * 8 + 4) + (2 * 9) + 4) * 9 + 9 + 7 * 5 + 3
5 * ((6 * 8 * 8) + 7 + 2 + 2 * 6 + 5)
8 + (8 * 5 + 3)
6 * 3 * (9 * 2) + (9 + 2 * 3 + 6)
5 + 4 * (2 + 2 + 5 * 6 + 3) + 5 + 3
(6 * 8 * 3 + 4 + (3 * 4 * 4)) * 6
(8 * (5 * 8 + 9) + 6 * 3 * 6 + 8) * 8 * 4 + 9
7 + ((5 + 4 + 6 * 4 * 7) * (9 + 6 * 8 * 6))
(9 + 4 * (4 + 9 * 9 + 4 * 9 * 6) * 2 + 9 + 8) * ((6 + 3 * 5) * 3 + 9 + 7 + (2 * 9) + 5) + 2 * (6 * 2 + 9 + 7) + 6
8 * 7 * 3
5 + ((9 + 8) * 7 * (4 * 2))
(5 * (8 + 9 + 4 + 4) + (4 + 5 * 5 + 3 * 7) * (9 + 6)) * 5 + 8 + 2
8 * (3 * 4) * (3 * 2 * 8 * 5 + 3 * (5 + 2 * 4))
3 * 3 * (3 + 3 * 9) * ((4 + 6 * 8) + 2 + (7 * 9) + 6 + 2 + (5 * 8 + 4)) + 8
9 * 5 * (7 + 6 * 6 * (5 + 7 + 8 + 4) + (3 + 8 * 5 * 3 + 8) + (5 + 4 * 2 * 7 + 8)) + 3 * 4
8 + (6 + 7 * 9) * 2 + 9
3 * 6 * 8 * 9 + (2 + 7 * 4) * ((3 + 9 + 6) * 4)
9 + 7 * ((3 * 3) * 2 + 4) + 3
(9 + 7 + 7 * 4) + 7
5 + 5 + 6 * (8 * 7 * 8 + 4 * 8 + 2) + ((6 * 3 + 9 + 6 * 7 * 7) + 2) * (6 * 3 * 4 + 4 * (6 + 9) + (5 + 3 + 3 * 4 * 2))
2 + 3 * 8 * (9 * 3 + 3 + (9 + 6 * 2 + 8 + 6 + 6) + 8 * 3) * 4
7 * 2 + 2 + ((9 + 3 * 7 + 8 + 7) * 2 * 2 + (9 * 5 + 9 + 9 * 8)) + (6 * 8 * 7 * 6 * 2 + 2)
(2 + 7 + 3) + 5 * 8 + 8 * 4
9 * 8 + 8 * 8 + 8 * 4
8 * (8 * 8 * 6 * (3 + 5 * 4)) + (8 + 9 * (8 + 9 * 8 * 8) + 4 * 3) + ((4 * 4) + 6 * 2 * 4 + 2) + 2 + 9
6 * (8 + 2 + 5) + (9 * 6 * 5 + (8 * 4 + 4 * 8 + 4) + 8)
3 + 6 + 7 + 5 + 8 * ((3 * 8 + 6) + 8)
(5 + (5 + 6 + 9 + 4)) * 4 + 2 * 8 + 7 + (4 + (5 + 8 + 5 * 4) + 2)
9 + (6 * 3 * 5 * (4 + 9) + (4 * 9))
5 + (8 + 7 * 7 * 3) + 3 + 3
9 + ((2 + 2) * 7 * 2 * 4 + 2) * 2 * 7
4 * (6 * 9) + (7 + 7 * 2 + 8 * 5) + 5 * 6 + 6
2 + 7 * (8 + 3 + 5 * (6 + 3 + 3 * 3) + 9 + (6 * 3)) + 3 * ((9 + 4 * 9) * 6 * 9 + 3 + 3) + 2
6 * 6 + 6 + (6 * 4) + 2
9 * ((3 * 2 + 2) * (6 + 9 * 9 + 5 * 5) + 9) * 6
3 * ((8 + 4 * 6 * 2 + 5) + 4 + 2 * 9 + 2 * (9 + 7 + 4 + 6 * 7 + 4)) * 2 + ((3 + 9 + 8 + 7) * 4 * 7 * 9 * (9 + 3 + 7 + 5 * 2)) + (4 * 7 + 2)
9 + ((8 * 2 + 9) * 6 * (8 * 3 + 2 + 8 * 3 * 4) + (5 * 2) * 5) + (3 * 6 * 4) * 4 + 6 * 2
2 + 8 + 3 * (9 + 3 * 6 * 6 * 2)
(3 + 9 + (6 + 3)) * 8
((7 + 8) * 4 + 3 * (7 * 7) * 6 * (6 * 5 + 7 + 4 * 6 * 4)) * 5 * 4
(6 + 6 + 7 * 3) + (2 * 3 * 2 * (2 * 8) + 4 * 9)
(7 * 6 * 6 + (8 * 5 * 4 + 8)) + 3 + (7 + 4 + 7) + 7 * 4
(4 + (8 + 8 + 5 + 8) + 8 + 8 * 4 * 9) * 7 * 2 * 2
(6 + 4 + 9 * 9) * (8 + 9 + (7 * 7 * 2) * 2) * 3 + (5 * 7 * 3) * 7 + (8 + 9 + (9 * 2 * 9) + 8)
4 + (6 * 6 * (4 * 7 + 3 * 8 + 6)) * ((7 + 7) * 2) + 9 + 4 * 2
(5 + 5 + 5 + 2) + 7 + 9
2 + 6 * (5 + 4 + 3 * 4 + 8) * (5 + 9 + 2 + 3 * 8)
9 * 4 + 6 * 3
(4 + 8 + 8) + 7 * (4 + (3 + 9) + 2) + 7
((7 + 2 * 7 * 6 + 8 + 5) + 9 + 2 + (2 * 6 * 3 + 9 * 3) + 8 * 5) * 7 + (6 * 8 + 7 * (9 + 2 * 6 * 5 * 9) * (4 * 6 + 2)) * 8 + 3
4 * 8 * (3 + (8 * 6 * 3 * 4 * 4)) + (6 + 7)
8 * 6 * 8 * 3 + 9 * 8
7 * (2 * (6 + 3 + 4 * 4 + 2) + 4 * (3 + 2 + 4 * 8 * 6) * 3 + 4) + 7 + 2
5 + 8 + (9 + 9 + 6 + 4 * 9)
7 + 7 + 9 + 9 * 6 * 6
((9 * 8 + 7 + 6 + 2) * 6) * 7
6 + 3
4 * 9 * 4 * (7 * 9 * 4 + 5 * 4 * 5) * 2
5 + 5 * (7 * 2) * (8 * 4 + 7 * 6 + 6) + 6 * 2
(7 * (4 + 6 + 9 + 2 * 4) + 2 + 6) + 9 + 3 * 5 * (5 * 7 + (8 + 2 * 8) * 4 + 8)
6 * (6 + 6 + (3 + 7 * 5 + 5) * 5 * 2 + (2 * 5 + 6 * 6)) * 2 + 6
5 + ((8 + 5 * 7) + 9 + 6 + 3 * 3) * 6 * (2 * 6 + 6 * 6) * 5
9 * 9 * ((4 * 6 * 5 * 5 + 8 + 3) * 8 * 7 + (8 * 9))
4 * (4 * 5 * (7 + 7) * 2) * 6
8 * (3 + 5) * (4 * 4 + (4 + 3 + 3) + 6)
4 * (4 * (9 * 4 + 4 + 2) + 9) + 2 * 7 * 9
4 * (5 + 3 + 4 + 8 + 3 * (6 * 9 * 5 + 7 * 8 * 6)) * (6 * 3) + 6 * 4
9 + 3
7 * 6 + (6 * 3 * 8 * 6) * 3 * (3 + 5 * (3 * 7 + 2 + 9 * 6) + (4 * 3 + 6 * 4 * 8 * 5) + 8)
(7 * 2 + 5 + 2) * (3 + 6 + 3 * 9)
9 * 5 * (5 + 9 * (5 * 6 + 2 + 9 * 2 + 3) * 4 + 6 + 9) + 6 + 2 * 8
8 * 4 * 2
((4 * 8) + 9) + (3 + (8 * 7) + 6 + 4) + 2 * 5 * 3 + 4
3 * 3 + (2 * (8 * 3 + 5 + 4 + 9 * 4) * 2) * (9 * 8 * 4 + 5 * 8 * 2)
3 + ((8 * 3 + 3 + 4 + 7 + 6) + 9 + 5) * (9 * 5 + 5 + 6 + 3 * 9) * 2
2 + 7 * 6 + 7 + 6
(9 + (3 + 7 * 5 * 8 * 2)) * 2 + 5 * 4 * (3 + 3 * (3 + 5 * 7 + 7 * 2))
8 * 7 * 9 * 3 + (4 * 5 + 9 * 6 + 5 + 4) * 9
7 * 5 * 6 * 9 + (2 + (8 + 6 + 3) + (9 * 2 + 9 + 5 + 9))
5 * 3 + 8 + 2 + (4 + 2 + 5) + 8
7 + (4 * (7 * 9 + 4 + 7) * 7 + 7 + 5) + 8
5 * 4 + 6 * (5 * 4 + 3 * (3 * 2 + 6) * 8 + (3 * 2 + 4)) * 7
(9 * (9 + 9 * 8 + 7 + 5 * 2) * 4 * 4 * (6 + 6) * 3) * (7 + 6 * (3 + 7 + 6) * 2)
9 + 5 * 2 * (8 * 9)
(2 * 9 + 5) * (2 + 8 * 4 * 5 * 4) + 2 + 3 + 3 * 7
((6 + 9) + 5 + 5 * (9 + 2 + 9)) * 4 + 4 * 7
4 * 4 + (9 + (8 * 3 + 2 + 8) * 4 * 8 + (4 + 6 + 8 + 8 * 2) + 8)
4 + 5 + 9 + 3 * 8 * 9
3 + (8 * 4 + 8 * 3 * 5) + 3 * 2 + 2 + 9
(6 + 9 + 3 * 2 * 5 * 2) * 7 * 3 * 5 + (8 * 5)
((2 * 3 + 9 * 7 * 5 * 9) * 9 * 8) + 8
9 + (6 + 9 + 2) + (4 * 6 * 2 * (2 + 5 + 8 * 6 + 6))
(5 + 9 * 5 * 7 * 3) * (2 * 6 + 4 * (6 * 3 * 3 * 5) + 6) * 3 + 6 * 6
(4 + (9 * 2 * 8 + 8 + 6 * 9) * 5) * (7 * (7 + 7 * 8 + 3)) + (9 * 6 * 5 + (2 + 5 * 7)) + 5
6 + 3 * (7 + 4) * (6 + 9 + (8 * 5 + 9 + 8) * 9 * 6)
8 * (9 + (5 + 4 + 8) * 5)
4 + ((9 * 5 * 4 + 8 + 2) + 4) + 8 * 7 + 2
8 + 4 + 8 + 7 * (2 * 5)
9 * 9 + (7 * 6 + 3 + 7 + 2) * (2 + 4) + 8 * ((7 + 6 * 3 * 8 + 5) * (5 + 3 * 6) * 9 + 7)
8 * 7 * 8 * 6 * (4 * 5 * 5)
3 * 4 + ((9 + 3) + 6 + 9 * 7 * 9 + 7)
3 * 3 * (4 * (8 * 7 + 4 + 2 + 8) * (3 + 2 + 8 * 4) + (9 * 9 * 8 + 6 * 3)) * 5 + 8
3 + (5 * 9 * 4 * 8 + 3) + 8 + (4 + 7 + 4 * 9 + 7)
(5 + 7 * 7 + 2 * (5 + 3)) * (5 * (8 + 6 + 8) + 2 + (9 * 2 + 7 * 2 * 9)) + 3 * 6 * (4 * (7 * 2) * 6 * 3)
7 + ((4 + 5 * 3 * 3 + 4) * 9 + 8 * 5 * (8 + 7 + 9 + 2 * 4 * 7) * 2) * 7
7 + 5 * 8 * ((4 + 3 + 9 + 8 + 7 + 8) + 6 + 7 + 6 + 3 + 2) + 7 * 3
(8 * 2 * 5 * 4 * (8 + 5) * 8) + 2 + 2 + 8 * 9 + 2
(7 * 8 * 2 + 7 + 4) + 6 * 3 * 9 * (6 + 4 + 2 + 5 * 5 + 6)
8 * 2 + (6 + 7)
4 + (8 + 7) + (6 + 5 + 8 + 2 + 3 + 3) * 3 * 8 + 9
3 * 9 * ((6 + 5 * 6) + 5 + 4 * (3 * 4 * 5 + 4) + 3) + 9
(9 * 7 * (2 * 7 * 3 * 6) + 4 + 5) * 8 * (3 + (8 * 2 * 4 + 4) + 4 + (5 * 4 * 8 + 2 + 3) + (7 + 6 + 5 * 8)) + 6 + 3
7 * 3 * 7 * 8 + 8 * ((3 + 3 * 5) * 4 * 5 + 2 + 6 * 2)
(4 * 6 * 2) + 7 + 6
5 + (5 + 8 + 8 + 4) + 9 + 6 * 7 + 6
3 * (5 * 5 + (5 + 2 * 8 * 2) + 9 * 8) + 3 + 7 + 3
2 + 7 * 7 + (3 + (5 + 2 + 7) * 6 * 4)
6 + 5 * 8 + (2 + (6 + 4 + 6) + 6 * (7 + 6 * 4 + 9) * 6 * (3 * 7)) * (8 * 8 + 2 + 5 * 6 + 4)
(2 + 7 + (3 * 9 * 3 * 3 * 5) + 4 * 2 + 9) + 4
4 * (8 * (9 * 2 * 8 + 8 * 3 * 3) * 6 * (6 * 7 * 4 * 5 + 8)) * 8
4 + 5 * 2
(5 * (6 + 7 * 7 * 6) + (2 + 2) + 6) * 4 + 3
(7 * 9 + 8 + 3 + 5 * (2 + 9)) * 7 + 6
6 + 9 * (2 * 5 + 2 * (2 + 6 + 6 * 3 * 6 * 7)) + 2 * (5 + (5 * 8 * 6) * 9 * (6 + 2) + (9 + 6)) + 9
6 + 8 * 5
4 * 3
6 + 2 + 5 * (7 + (3 + 8) * (8 + 5 + 2 * 5) + 2 * (8 * 3 * 4 + 6 * 9 + 4))
5 * ((7 + 6) + 5 + 3 + 2 * (8 + 3)) + 2 * (4 * 2)
(3 * 5) * 2 + 5 + 2 * 8
6 * 7 * (8 + 7 + 5 * 4 * 2 + (3 + 4 * 3 + 6 * 4 * 6)) + 4
8 * (9 + (3 * 2 * 9 + 2 + 8) * (7 + 9 + 6 + 2 + 6 * 9) + 8 + 5) * (3 + 5) + 6 + 4 * 8
3 + (5 * (6 + 3) * 8 * (2 * 9) * 8)
4 * (9 + 4 * 9 * (9 + 3 + 9 + 3 + 7) * 4 * 2) * ((3 + 9 + 2) + (2 * 3 * 2 + 8 * 9 * 7) + 8 + 9 * 5) + 8
3 * 3 * (9 + 7 * (5 * 7 * 7) * 6 + 2 * 8) * 6 + 7
5 + 3 + 8 + 2 * ((9 * 5 + 7) + (2 * 9 * 7 * 6) + 9 + 3)
8 + (4 * 3 + (6 + 8 * 5 + 5) * (2 + 6 + 5 * 8)) * 6 * 6
((2 * 8 + 5 + 3) + (8 * 6 * 3 + 3 + 6 * 5) + 5) * 4 * 2
2 * (7 + (5 * 4 + 9) * 9) * 4 * 7 * (9 + 9 * 7 + 2 * 3 + 2)
2 + 3 * 6 + ((5 * 3 * 2 * 2 * 8 + 3) * 8 + (6 + 5 + 5 * 3 * 4 + 3)) + 9
6 * (7 + 3 * 7 * 7)
(2 * 3) + 3 + (5 + 8 * 6 + 4 + 3 + 4) * 7
8 + 4 * (7 * 7 * 8) * 8
(9 * (3 * 5) + 6 * 9 + 9) + 4 + 2 * 6
8 * (2 * 2 * 6 * 9 * 2) + 6 * 3
4 + 4 + 7 * 9 + (4 * 3 + (6 * 2) + 5 + 3 * 8)
(2 + 4 * 6 * 8 + 6 + 2) + 7 + 7
(6 + 2 * 3 * 2) + 7 * 2 * (4 * 8 * 8 + 5 + 8 + 5) + 6
8 * 3 + (6 + 5 + 2 * 6 * 6) * 2`;


const testInput = `((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2`;

function part1(input) {

    const evalExpr = (expr) => {
        // just a literal left
        if (expr.match(/^\d+$/)) {
            return parseInt(expr, 10);
        }
        // we have parentheses
        const parens = expr.match(/(\([\d\s+*]+\))/);
        if (parens) {
            return evalExpr(expr.replace(parens[0], evalExpr(parens[0].substring(1, parens[0].length - 1))));
        }
        const operation = expr.match(/^(\d+)\s([+*])\s(\d+)(.*)$/);
        if (operation) {
            const [, arg1, op, arg2, remainder] = operation;
            if (op === '+') {
                return evalExpr((parseInt(arg1, 10) + parseInt(arg2, 10)) + remainder);
            } else if (op === '*') {
                return evalExpr((parseInt(arg1, 10) * parseInt(arg2, 10)) + remainder);
            } else {
                throw new Error('wow, why?');
            }
        }
        throw new Error('so what happens now?');
    }


    console.log(input.split('\n').map(evalExpr).reduce((acc, item) => acc + item, 0));
}


function part2(input) {

    const evalExpr = (expr) => {
        console.log({ expr })
        // just a literal left
        const literal = expr.match(/^\(?(\d+)\)?$/)
        if (literal) {
            console.log('literal', literal)
            return literal[1];
        }
        // we have parentheses
        const parens = expr.match(/(\([\d\s+*]+\))/);
        if (parens) {
            console.log('parens')
            const newExpr = evalExpr(parens[0].substring(1, parens[0].length - 1));
            console.log('REPLACEING ', parens[0], ' with ', `(${newExpr})`, ' in ', expr)
            return (expr.replace(parens[0], newExpr.match(/^\d+$/) ? newExpr : `(${newExpr})`));
        }
        const sumOp = expr.match(/^(.* )?(\d+)\s\+\s(\d+)( .*)?$/);
        if (sumOp) {
            console.log('sumOp')

            const [, beginning, arg1, arg2, remainder] = sumOp;
            return ((beginning ? `${beginning}` : '') +
                (parseInt(arg1, 10) + parseInt(arg2, 10))
                + (remainder ? `${remainder}` : ''));
        }
        const multOp = expr.match(/^(.* )?(\d+)\s\*\s(\d+)( .*)?$/);
        if (multOp) {
            const [, beginning, arg1, arg2, remainder] = multOp;

            console.log('multOp', {beginning, arg1, arg2, remainder})
            return ((beginning ? `${beginning}` : '')
                + (parseInt(arg1, 10) * parseInt(arg2, 10))
                + (remainder ? `${remainder}` : ''));
        }
        throw new Error('so what happens now?');
    }

    const calc = (calcInput) => {
        let prevInput = calcInput
        do {
            prevInput = calcInput;
            calcInput = evalExpr(calcInput);
        } while (prevInput !== calcInput)
        console.log('RESULT', prevInput)
        return parseInt(prevInput, 10);
    }

    console.log(input.split('\n').map(calc).reduce((acc, item) => acc + item, 0));
}


part2(input);